apiVersion: database.marklogic.com/v1alpha1
kind: MarklogicGroup
metadata:
  labels:
    app.kubernetes.io/name: marklogicgroup
    app.kubernetes.io/instance: marklogicgroup-sample
    app.kubernetes.io/part-of: marklogic-kubernetes-operator
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/created-by: marklogic-kubernetes-operator
  name: marklogicgroup-sample
spec:
  replicas: 1
  name: marklogic
  image: "progressofficial/marklogic-db:11.3.0-ubi-rootless"
  auth:
    adminUsername: user
    adminPassword: pass
  # storage:
  #   size: 10Gi
  terminationGracePeriodSeconds: 9
  updateStrategy: OnDelete
  # groupConfig:
  #   name: "node"
  # service: 
  #     ## service type could be ClusterIP, NodePort or LoadBalancer, default is ClusterIP
  #     type: ClusterIP
      ## Uncomment the following lines to add additional ports to the service
      # additionalPorts: 
      # - name: app1
      #   port: 8010 
      #   targetPort: 8010
      #   protocol: TCP
      ## Uncomment the following lines to add annotations to the service
      # annotations: {}

## Uncomment the following lines to specify the podSecurityContext and containerSecurityContext
## Note: Below values are set to default, please update them as per your requirements
  # podSecurityContext:
  #   fsGroup: 2
  #   fsGroupChangePolicy: OnRootMismatch
  # securityContext:
  #   runAsUser: 1000
  #   runAsNonRoot: true
  #   allowPrivilegeEscalation: false

  logCollection:
    enabled: true
    image: fluent/fluent-bit:3.1.1
    files:
      errorLogs: true
      accessLogs: true
      requestLogs: true
      crashLogs: true
      auditLogs: true
    outputs: |-
        [OUTPUT]
          name loki
          match *
          host loki.loki.svc.cluster.local
          port 3100
          labels job=fluent-bit
          http_user admin
          http_passwd admin
  
  ## To configure networkPolicy, set enabled: true and uncomment the following lines 
  ## Below is an example of networkPolicy, update it as per your requirements
  ## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies
  networkPolicy:
    enabled: false
  #   policyTypes:
  #     - Ingress
  #     - Egress
  #   podSelector: {}
  #   ingress:
  #     - from:
  #         - podSelector:
  #             matchLabels:
  #               app.kubernetes.io/name: marklogic
  #               app.kubernetes.io/instance: marklogic
  #       ports:
  #         - protocol: TCP
  #           port: 8000
  #   egress:
  #     - to:
  #         - podSelector:
  #             matchLabels:
  #               app.kubernetes.io/name: marklogic
  #               app.kubernetes.io/instance: marklogicgroup
  #       ports:
  #         - protocol: TCP
  #           port: 8000

  ## Configuration for the HAProxy load balancer
  ## An out of box load balancer with configured to handle cookie based session affinity that required by most MarkLogic applications.
  ## It also support multi-statement transaction and ODBC connections.  
  ## Uncomment the following lines to enable HAProxy configuration
  # haProxyConfig:
  #   enabled: true
  #   replicas: 1
  #   frontendPort: 80
  #   pathBasedRouting: true
  #   stats: 
  #     enabled: true
  #     port: 1024
  #     auth:
  #       enabled: true
  #       username: user
  #       password: pass
  #   tcpPorts:
  #     enabled: true
  #     ports:
  #       - name: odbc
  #         type: TCP
  #         port: 5432
  #   additionalAppServers:
  #     - name: app1
  #       path: /test1
  #       port: 8010
  #       targetPort: 8010
  #       type: HTTP
  #     - name: app2
  #       path: /test2
  #       port: 8011
  #       targetPort: 8011
  #       type: HTTP

  # resources:
  #   requests:
  #     memory: "6Gi"
  #     cpu: "2"
  #   limits:
  #     memory: "6Gi"
  #     cpu: "2"
  # livenessProbe:
  #   enabled: true
  #   initialDelaySeconds: 31
  #   periodSeconds: 11
  #   timeoutSeconds: 6
  #   successThreshold: 1
  #   failureThreshold: 4
  # readinessProbe:
  #   enabled: true
  #   initialDelaySeconds: 29
  #   periodSeconds: 9
  #   timeoutSeconds: 4
  #   successThreshold: 1
  #   failureThreshold: 2